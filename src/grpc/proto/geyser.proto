syntax = "proto3";

package geyser;

service Geyser {
  rpc Subscribe(SubscribeRequest) returns (stream SubscribeUpdate) {}
  rpc Ping(PingRequest) returns (PongResponse) {}
  rpc GetLatestBlockhash(GetLatestBlockhashRequest) returns (GetLatestBlockhashResponse) {}
  rpc GetBlockHeight(GetBlockHeightRequest) returns (GetBlockHeightResponse) {}
  rpc GetSlot(GetSlotRequest) returns (GetSlotResponse) {}
  rpc IsBlockhashValid(IsBlockhashValidRequest) returns (IsBlockhashValidResponse) {}
  rpc GetVersion(GetVersionRequest) returns (GetVersionResponse) {}
}

message SubscribeRequest {
  map<string, SubscribeRequestFilterSlots> slots = 1;
  map<string, SubscribeRequestFilterAccounts> accounts = 2;
  map<string, SubscribeRequestFilterTransactions> transactions = 3;
  map<string, SubscribeRequestFilterBlocks> blocks = 4;
  map<string, SubscribeRequestFilterBlocksMeta> blocks_meta = 5;
  optional CommitmentLevel commitment = 6;
  repeated SubscribeRequestAccountsDataSlice accounts_data_slice = 7;
  optional SubscribeRequestPing ping = 8;
}

message SubscribeRequestFilterSlots {
  optional bool filter_by_commitment = 1;
}

message SubscribeRequestFilterAccounts {
  repeated string account = 1;
  repeated string owner = 2;
  repeated SubscribeRequestFilterAccountsFilter filters = 3;
}

message SubscribeRequestFilterAccountsFilter {
  oneof filter {
    SubscribeRequestFilterAccountsFilterMemcmp memcmp = 1;
    uint64 datasize = 2;
  }
}

message SubscribeRequestFilterAccountsFilterMemcmp {
  uint64 offset = 1;
  oneof data {
    bytes bytes = 2;
    string base58 = 3;
    string base64 = 4;
  }
}

message SubscribeRequestFilterTransactions {
  optional bool vote = 1;
  optional bool failed = 2;
  optional string signature = 3;
  repeated string account_include = 4;
  repeated string account_exclude = 5;
  repeated string account_required = 6;
}

message SubscribeRequestFilterBlocks {
  repeated string account_include = 1;
  optional bool include_transactions = 2;
  optional bool include_accounts = 3;
  optional bool include_entries = 4;
}

message SubscribeRequestFilterBlocksMeta {}

message SubscribeRequestAccountsDataSlice {
  uint64 offset = 1;
  uint64 length = 2;
}

message SubscribeRequestPing {
  int32 id = 1;
}

message SubscribeUpdate {
  repeated string filters = 1;
  oneof update_oneof {
    SubscribeUpdateAccount account = 2;
    SubscribeUpdateSlot slot = 3;
    SubscribeUpdateTransaction transaction = 4;
    SubscribeUpdateBlock block = 5;
    SubscribeUpdatePing ping = 6;
    SubscribeUpdatePong pong = 7;
    SubscribeUpdateBlockMeta block_meta = 8;
  }
}

message SubscribeUpdateAccount {
  SubscribeUpdateAccountInfo account = 1;
  uint64 slot = 2;
  bool is_startup = 3;
}

message SubscribeUpdateAccountInfo {
  bytes pubkey = 1;
  uint64 lamports = 2;
  bytes owner = 3;
  bool executable = 4;
  uint64 rent_epoch = 5;
  bytes data = 6;
  uint64 write_version = 7;
  optional bytes txn_signature = 8;
}

message SubscribeUpdateSlot {
  uint64 slot = 1;
  optional uint64 parent = 2;
  SubscribeUpdateSlotStatus status = 3;
}

enum SubscribeUpdateSlotStatus {
  PROCESSED = 0;
  CONFIRMED = 1;
  FINALIZED = 2;
}

message SubscribeUpdateTransaction {
  SubscribeUpdateTransactionInfo transaction = 1;
  uint64 slot = 2;
}

message SubscribeUpdateTransactionInfo {
  bytes signature = 1;
  bool is_vote = 2;
  TransactionDetails transaction = 3;
  TransactionStatusMeta meta = 4;
  uint64 index = 5;
}

message TransactionDetails {
  bytes message = 1;
  repeated bytes signatures = 2;
}

message TransactionStatusMeta {
  TransactionError err = 1;
  uint64 fee = 2;
  repeated uint64 pre_balances = 3;
  repeated uint64 post_balances = 4;
  repeated InnerInstructions inner_instructions = 5;
  bool inner_instructions_none = 6;
  repeated string log_messages = 7;
  bool log_messages_none = 8;
  repeated TokenBalance pre_token_balances = 9;
  repeated TokenBalance post_token_balances = 10;
  repeated Reward rewards = 11;
  bool rewards_none = 12;
  repeated UiTokenAmount loaded_writable_addresses = 13;
  repeated UiTokenAmount loaded_readonly_addresses = 14;
  optional ReturnData return_data = 15;
  bool return_data_none = 16;
  optional uint64 compute_units_consumed = 17;
}

message TransactionError {
  bytes err = 1;
}

message InnerInstructions {
  uint32 index = 1;
  repeated InnerInstruction instructions = 2;
}

message InnerInstruction {
  uint32 program_id_index = 1;
  bytes accounts = 2;
  bytes data = 3;
  optional uint8 stack_height = 4;
}

message TokenBalance {
  uint32 account_index = 1;
  string mint = 2;
  UiTokenAmount ui_token_amount = 3;
  string owner = 4;
  string program_id = 5;
}

message UiTokenAmount {
  double ui_amount = 1;
  uint32 decimals = 2;
  string amount = 3;
  string ui_amount_string = 4;
}

message ReturnData {
  bytes program_id = 1;
  bytes data = 2;
}

message Reward {
  string pubkey = 1;
  uint64 lamports = 2;
  uint64 post_balance = 3;
  RewardType reward_type = 4;
  string commission = 5;
}

enum RewardType {
  Unspecified = 0;
  Fee = 1;
  Rent = 2;
  Staking = 3;
  Voting = 4;
}

message SubscribeUpdateBlock {
  uint64 slot = 1;
  string blockhash = 2;
  repeated Reward rewards = 3;
  UnixTimestamp block_time = 4;
  BlockHeight block_height = 5;
  uint64 parent_slot = 6;
  string parent_blockhash = 7;
  uint64 executed_transaction_count = 8;
  repeated SubscribeUpdateTransactionInfo transactions = 9;
  repeated SubscribeUpdateAccountInfo accounts = 10;
  repeated Entry entries = 11;
}

message Entry {
  uint64 num_hashes = 1;
  bytes hash = 2;
  uint64 num_transactions = 3;
}

message SubscribeUpdateBlockMeta {
  uint64 slot = 1;
  string blockhash = 2;
  repeated Reward rewards = 3;
  UnixTimestamp block_time = 4;
  BlockHeight block_height = 5;
  uint64 parent_slot = 6;
  string parent_blockhash = 7;
  uint64 executed_transaction_count = 8;
}

message SubscribeUpdatePing {}

message SubscribeUpdatePong {
  int32 id = 1;
}

message PingRequest {}
message PongResponse {}

message GetLatestBlockhashRequest {
  optional CommitmentLevel commitment = 1;
}

message GetLatestBlockhashResponse {
  uint64 slot = 1;
  string blockhash = 2;
  uint64 last_valid_block_height = 3;
}

message GetBlockHeightRequest {
  optional CommitmentLevel commitment = 1;
}

message GetBlockHeightResponse {
  uint64 block_height = 1;
}

message GetSlotRequest {
  optional CommitmentLevel commitment = 1;
}

message GetSlotResponse {
  uint64 slot = 1;
}

message IsBlockhashValidRequest {
  string blockhash = 1;
  optional CommitmentLevel commitment = 2;
}

message IsBlockhashValidResponse {
  uint64 slot = 1;
  bool valid = 2;
}

message GetVersionRequest {}

message GetVersionResponse {
  string version = 1;
}

enum CommitmentLevel {
  PROCESSED = 0;
  CONFIRMED = 1;
  FINALIZED = 2;
}

message BlockHeight {
  uint64 block_height = 1;
}

message UnixTimestamp {
  int64 timestamp = 1;
}