// Replace the Promise.allSettled block in performFullAnalysis with:

    // First, check if we need SolSniffer
    const needsSolSniffer = await this.shouldCallSolSniffer(tokenAddress);
    
    // Call APIs conditionally
    const apiCalls = [
      this.dexscreener.getTokenPairs(tokenAddress),
      this.birdeye.getTokenOverview(tokenAddress),
      this.getTop10Concentration(tokenAddress),
      this.raydium.getPoolInfo(tokenAddress)
    ];
    
    // Only add SolSniffer if needed
    if (needsSolSniffer) {
      apiCalls.push(this.solsniffer.analyzeToken(tokenAddress));
    } else {
      // Get cached score if available
      const cachedToken = await db('tokens')
        .where('address', tokenAddress)
        .select('solsniffer_score', 'security_data')
        .first();
      
      if (cachedToken?.solsniffer_score) {
        apiCalls.push(Promise.resolve({
          score: cachedToken.solsniffer_score,
          securityFlags: cachedToken.security_data ? JSON.parse(cachedToken.security_data) : {}
        }));
      } else {
        apiCalls.push(Promise.reject(new Error('No SolSniffer data')));
      }
    }
    
    const [
      dexData,
      birdeyeData,
      holderData,
      raydiumData,
      solsnifferData
    ] = await Promise.allSettled(apiCalls);

// Add this method to the class:

  private async shouldCallSolSniffer(tokenAddress: string): Promise<boolean> {
    // Get token to check basic criteria
    const token = await db('tokens')
      .where('address', tokenAddress)
      .first();
      
    if (!token) return false;
    
    const criteria = categoryConfig.buySignalCriteria;
    
    // Don't call if basic criteria not met
    if (token.market_cap < criteria.marketCap.min || 
        token.market_cap > criteria.marketCap.max ||
        token.liquidity < criteria.liquidity.min ||
        (token.holders && token.holders < criteria.holders.min) ||
        (token.top_10_percent && token.top_10_percent >= criteria.top10Concentration.max)) {
      logger.info(`[SOLSNIFFER] Skipping - basic criteria not met for ${token.symbol}`);
      return false;
    }
    
    // Check cache (1 hour)
    if (token.solsniffer_checked_at) {
      const hoursSinceCheck = (Date.now() - new Date(token.solsniffer_checked_at).getTime()) / (1000 * 60 * 60);
      if (hoursSinceCheck < 1) {
        logger.info(`[SOLSNIFFER] Using cache for ${token.symbol} (${hoursSinceCheck.toFixed(1)}h old)`);
        return false;
      }
    }
    
    return true;
  }
