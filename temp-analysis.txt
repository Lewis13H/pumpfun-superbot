
  src\analysis\category-api-router.ts:67:    
  src\analysis\category-api-router.ts:68:    logger.info(`Analyzing ${tokenAddress} (${category}) - ${useFullAnalysis ? 'FULL' : 'BASIC'} analysis`);
  src\analysis\category-api-router.ts:69:    
  src\analysis\category-api-router.ts:70:    try {
  src\analysis\category-api-router.ts:71:      if (useFullAnalysis && category === 'AIM') {
> src\analysis\category-api-router.ts:72:        return await this.performFullAnalysis(tokenAddress, category, startTime);
  src\analysis\category-api-router.ts:73:      } else {
  src\analysis\category-api-router.ts:74:        return await this.performBasicAnalysis(tokenAddress, category, startTime);
  src\analysis\category-api-router.ts:75:      }
  src\analysis\category-api-router.ts:76:    } catch (error) {
  src\analysis\category-api-router.ts:77:      logger.error(`Analysis failed for ${tokenAddress}:`, error);
  src\analysis\category-api-router.ts:78:      throw error;
  src\analysis\category-api-router.ts:79:    }
  src\analysis\category-api-router.ts:80:  }
  src\analysis\category-api-router.ts:81:  
  src\analysis\category-api-router.ts:82:  /**
  src\analysis\category-api-router.ts:83:   * Basic analysis - no expensive APIs
  src\analysis\category-api-router.ts:84:   */
  src\analysis\category-api-router.ts:85:  private async performBasicAnalysis(
  src\analysis\category-api-router.ts:86:    tokenAddress: string,
  src\analysis\category-api-router.ts:87:    category: TokenCategory,
  src\analysis\category-api-router.ts:88:    startTime: number
  src\analysis\category-api-router.ts:89:  ): Promise<CategoryAnalysisResult> {
  src\analysis\category-api-router.ts:90:    const apisUsed: string[] = [];
  src\analysis\category-api-router.ts:91:    let costIncurred = 0;
  src\analysis\category-api-router.ts:92:    
  src\analysis\category-api-router.ts:93:    // Use multiple APIs for better data coverage
  src\analysis\category-api-router.ts:94:    const [dexData, birdeyeData, heliusHolders, raydiumData] = await Promise.allSettled([
  src\analysis\category-api-router.ts:95:      this.dexscreener.getTokenPairs(tokenAddress),
  src\analysis\category-api-router.ts:96:      this.birdeye.getTokenOverview(tokenAddress),
  src\analysis\category-api-router.ts:97:      this.helius.getTokenHolders(tokenAddress, 20), // Get top 20 holders
  src\analysis\category-api-router.ts:98:      this.raydium.getPoolInfo(tokenAddress)
  src\analysis\category-api-router.ts:99:    ]);
  src\analysis\category-api-router.ts:100:    
  src\analysis\category-api-router.ts:101:    // Parse results
  src\analysis\category-api-router.ts:102:    let marketData = {
  src\analysis\category-api-router.ts:103:      marketCap: 0,
  src\analysis\category-api-router.ts:104:      price: 0,
  src\analysis\category-api-router.ts:105:      liquidity: 0,
  src\analysis\category-api-router.ts:106:      volume24h: 0,
  src\analysis\category-api-router.ts:107:      holders: 0,
  src\analysis\category-api-router.ts:108:    };
  src\analysis\category-api-router.ts:109:    
  src\analysis\category-api-router.ts:110:    // DexScreener (free)
  src\analysis\category-api-router.ts:111:    if (dexData.status === 'fulfilled' && dexData.value?.length > 0) {
  src\analysis\category-api-router.ts:112:      const pair = dexData.value[0];
  src\analysis\category-api-router.ts:113:      marketData.marketCap = parseFloat(pair.fdv?.toString() || '0');
  src\analysis\category-api-router.ts:114:      marketData.price = parseFloat(pair.priceUsd?.toString() || '0');
  src\analysis\category-api-router.ts:115:      
  src\analysis\category-api-router.ts:116:      // Handle liquidity - can be object or number
  src\analysis\category-api-router.ts:117:      if (pair.liquidity) {
  src\analysis\category-api-router.ts:118:        if (typeof pair.liquidity === 'object' && pair.liquidity !== null) {
  src\analysis\category-api-router.ts:119:          // Type assertion to handle the object structure
  src\analysis\category-api-router.ts:120:          const liq = pair.liquidity as any;
  src\analysis\category-api-router.ts:121:          marketData.liquidity = parseFloat(liq.usd?.toString() || '0');
  src\analysis\category-api-router.ts:122:        } else {
  src\analysis\category-api-router.ts:222:  }
  src\analysis\category-api-router.ts:223:  
  src\analysis\category-api-router.ts:224:  /**
  src\analysis\category-api-router.ts:225:   * Full analysis - all APIs including SolSniffer
  src\analysis\category-api-router.ts:226:   */
> src\analysis\category-api-router.ts:227:  private async performFullAnalysis(
  src\analysis\category-api-router.ts:228:    tokenAddress: string,
  src\analysis\category-api-router.ts:229:    category: TokenCategory,
  src\analysis\category-api-router.ts:230:    startTime: number
  src\analysis\category-api-router.ts:231:  ): Promise<CategoryAnalysisResult> {
  src\analysis\category-api-router.ts:232:    const apisUsed: string[] = [];
  src\analysis\category-api-router.ts:233:    let costIncurred = 0;
  src\analysis\category-api-router.ts:234:    
  src\analysis\category-api-router.ts:235:    // Call all APIs including expensive ones
  src\analysis\category-api-router.ts:236:    const [
  src\analysis\category-api-router.ts:237:      dexData,
  src\analysis\category-api-router.ts:238:      birdeyeData,
  src\analysis\category-api-router.ts:239:      solsnifferData,
  src\analysis\category-api-router.ts:240:      holderData,
  src\analysis\category-api-router.ts:241:      raydiumData
  src\analysis\category-api-router.ts:242:    ] = await Promise.allSettled([
  src\analysis\category-api-router.ts:243:      this.dexscreener.getTokenPairs(tokenAddress),
  src\analysis\category-api-router.ts:244:      this.birdeye.getTokenOverview(tokenAddress),
  src\analysis\category-api-router.ts:245:      this.solsniffer.analyzeToken(tokenAddress),
  src\analysis\category-api-router.ts:246:      this.getTop10Concentration(tokenAddress),
  src\analysis\category-api-router.ts:247:      this.raydium.getPoolInfo(tokenAddress)
  src\analysis\category-api-router.ts:248:    ]);
  src\analysis\category-api-router.ts:249:    
  src\analysis\category-api-router.ts:250:    // Parse results
  src\analysis\category-api-router.ts:251:    let marketData = {
  src\analysis\category-api-router.ts:252:      marketCap: 0,
  src\analysis\category-api-router.ts:253:      price: 0,
  src\analysis\category-api-router.ts:254:      liquidity: 0,
  src\analysis\category-api-router.ts:255:      volume24h: 0,
  src\analysis\category-api-router.ts:256:      holders: 0,
  src\analysis\category-api-router.ts:257:    };
  src\analysis\category-api-router.ts:258:    
  src\analysis\category-api-router.ts:259:    let securityData = {
  src\analysis\category-api-router.ts:260:      solsnifferScore: 0,
  src\analysis\category-api-router.ts:261:      securityFlags: {},
  src\analysis\category-api-router.ts:262:      top10Percent: 0,
  src\analysis\category-api-router.ts:263:    };
  src\analysis\category-api-router.ts:264:    
  src\analysis\category-api-router.ts:265:    // DexScreener (free)
  src\analysis\category-api-router.ts:266:    if (dexData.status === 'fulfilled' && dexData.value?.length > 0) {
  src\analysis\category-api-router.ts:267:      const pair = dexData.value[0];
  src\analysis\category-api-router.ts:268:      marketData.marketCap = parseFloat(pair.fdv?.toString() || '0');
  src\analysis\category-api-router.ts:269:      marketData.price = parseFloat(pair.priceUsd?.toString() || '0');
  src\analysis\category-api-router.ts:270:      
  src\analysis\category-api-router.ts:271:      // Handle liquidity - can be object or number
  src\analysis\category-api-router.ts:272:      if (pair.liquidity) {
  src\analysis\category-api-router.ts:273:        if (typeof pair.liquidity === 'object' && pair.liquidity !== null) {
  src\analysis\category-api-router.ts:274:          // Type assertion to handle the object structure
  src\analysis\category-api-router.ts:275:          const liq = pair.liquidity as any;
  src\analysis\category-api-router.ts:276:          marketData.liquidity = parseFloat(liq.usd?.toString() || '0');
  src\analysis\category-api-router.ts:277:        } else {


